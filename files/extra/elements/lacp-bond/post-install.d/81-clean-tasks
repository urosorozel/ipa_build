#!/bin/bash

echo "Remove /etc/resolv.conf"
rm /etc/resolv.conf
test -f /etc/resolv.conf.ORIG && rm /etc/resolv.conf.ORIG
echo "Create soft link /run/systemd/resolve/stub-resolv.conf"
ln -s /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf


# remove /lib/systemd/network/99-default.link to be able to get member mac address
# it othwrwise gets configured with random mac
rm /lib/systemd/network/99-default.link

# Disable time sync
systemctl disable  systemd-timesyncd.service

# enable ssh password
sed -i 's|PasswordAuthentication no|PasswordAuthentication yes|g' /etc/ssh/sshd_config
# Disable exec on usr/lib/systemd/system/ironic-python-agent.service
chmod -x /usr/lib/systemd/system/ironic-python-agent.service

# Delay start because of LACP bonding
echo "Add delay service start for IPA"
mkdir -p /etc/systemd/system/ironic-python-agent.service.d
cat > /etc/systemd/system/ironic-python-agent.service.d/delay.conf <<EOF
[Service]
ExecStartPre=/bin/sleep 45
EOF

echo "Add udev rules service"
mkdir /etc/systemd/system/systemd-udevd.service.d
cat > /etc/systemd/system/systemd-udevd.service.d/10-bootif.conf  <<EOF
[Service]
ExecStartPre=-/bin/udev-bootif.sh
EOF

echo "Add udev script exe permissions"

chmod +x /bin/udev-bootif.sh
mkdir /etc/netplan
cat > /etc/netplan/bond.yaml << EOF
network:
    version: 2
    renderer: networkd
    ethernets:
        port1:
            match:
                name: enoboot0
        port2:
            match:
                name: enoboot1
    bonds:
        bond0:
            dhcp4: yes
            interfaces:
            - port1
#            - port2
            parameters:
                mode: 802.3ad
                mii-monitor-interval: 100
EOF
cat > /etc/network/interfaces.d/bond0.cfg <<EOF
auto enoboot0
iface enoboot0 inet manual
    bond-master bond0
    mtu 1500

#auto enoboot1
#iface enoboot1 inet manual
#    bond-master bond0
#    mtu 1500

auto bond0
iface bond0 inet dhcp
    bond-mode 4
    bond_xmit_hash_policy layer3+4
    bond-lacp-rate 1
    bond-miimon 100
    bond-slaves none
    mtu 1500
EOF
cat > /bin/netplan-static.py << "EOF"
#!/usr/bin/env python

import yaml
from netaddr import *

cmdline = open('/proc/cmdline', 'rb').read().replace(b'\0', b' ').decode()
#cmdline = "BOOT_IMAGE=/boot/vmlinuz-4.4.0-116-generic root=/dev/md126p1 BOOTIF=00-FE-C4-7A-B6-2F-F2 ro rd.fstab=no acpi=noirq noapic cgroup_enable=memory swapaccount=1 quiet ip=192.168.1.100:192.168.10.10:192.168.1.1:255.255.255.0"

cmdline_list = cmdline.split(" ")
for item in cmdline_list:
   if item[:3] == "ip=":
     ip_var = item[3:]
   if item[:7] == "BOOTIF=":
     boot_mac = item[10:].replace("-",":").lower().strip()
net_details = ip_var.split(":")
ip_address = net_details[0]
tftp_server = net_details[1]
gateway = net_details[2]
netmask = net_details[3]

mac=EUI(boot_mac)
mac.value = mac.value + 1
mac.dialect = mac_unix_expanded

print("IP: %s TFTP: %s MASK: %s GW: %s" % (ip_address,tftp_server,netmask,gateway))
ip_network = IPNetwork(ip_address + "/" + netmask)

netplan = yaml.load(open("/etc/netplan/bond.yaml", "r"))
del netplan['network']['bonds']['bond0']['dhcp4']

netplan['network']['bonds']['bond0']['addresses'] = [str(ip_network)]
netplan['network']['bonds']['bond0']['gateway4'] = str(gateway)
#netplan["network"]["ethernets"]["port1"]["match"]["macaddress"] = str(boot_mac)
#netplan["network"]["ethernets"]["port2"]["match"]["macaddress"] = str(mac)

with open('/etc/netplan/bond.yaml', 'w') as yaml_file:
    yaml.dump(netplan, yaml_file, default_flow_style=False)
EOF
chmod +x /bin/netplan-static.py

cat > /etc/modprobe.d/systemd.conf << EOF
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.
#
# When bonding module is loaded, it creates bond0 by default due to max_bonds
# option default value 1. This interferes with the network configuration
# management / networkd, as it is not possible to detect whether this bond0 was
# intentionally configured by the user, or should be managed by
# networkd/NM/etc. Therefore disable bond0 creation.

options bonding max_bonds=0
EOF
